from rest_framework.views import APIView
from django.views.decorators.csrf import csrf_exempt
from rest_framework.response import Response
from drf_yasg.utils import swagger_auto_schema
from django.http import HttpResponse, JsonResponse
from drf_yasg import openapi
from .models import Category, Restaurant, Administrator, Ingredients, Label, Foto, Dish, Order
import json
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives import constant_time
import os
import base64
import requests
import random
from django.db import transaction

#–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Telegram, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
@csrf_exempt
def bottg(request):
    chat = str(json.loads(request.body)['message']['chat']['id'])
    texts = str(json.loads(request.body)['message']['text']).lower()
    if texts == "–∏–Ω—Ñ–æ":
        a = requests.get("https://api.telegram.org/bot6744104810:AAHr3z6BQ2tcaanS-ijtyNF6Fiqcgcn7uv8/sendMessage?chat_id=" + chat + "&text=–í–∞—à ID Telegram: "+ chat)
    else:
        a = requests.get("https://api.telegram.org/bot6744104810:AAHr3z6BQ2tcaanS-ijtyNF6Fiqcgcn7uv8/sendMessage?chat_id=" + chat + "&text=–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –±–æ—Ç—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n–ö–æ–º–∞–Ω–¥—ã:\nüìå–∏–Ω—Ñ–æ - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å ID Telegram –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ")
    return HttpResponse("Hi")

def string_to_key(key_string, salt):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª—é—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PBKDF2 –∏ —Å–æ–ª–∏.

    :param key_string: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞.
    :param salt: –°–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞.
    :return: 32-–±–∞–π—Ç–Ω—ã–π –∫–ª—é—á.
    """
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA256 –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏–∏
        length=32,  # –î–ª–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞ 32 –±–∞–π—Ç–∞ (256 –±–∏—Ç)
        salt=salt,  # –°–æ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        iterations=100000,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞ –∫–ª—é—á–∞
        backend=default_backend()  # –ë—ç–∫—ç–Ω–¥ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    )
    return kdf.derive(key_string.encode())  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∏–∑ —Å—Ç—Ä–æ–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
def encrypt_string(plaintext, key_string):
    """
    –®–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES –≤ —Ä–µ–∂–∏–º–µ CBC –∏ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞.

    :param plaintext: –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å.
    :param key_string: –°—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
    :return: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ base64.
    """
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–æ–ª–∏ –¥–ª—è –∫–ª—é—á–∞
    salt = os.urandom(16)
    key = string_to_key(key_string, salt)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ–ª–∏

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (IV)
    iv = os.urandom(16)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —à–∏—Ñ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES –∏ —Ä–µ–∂–∏–º–∞ CBC
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —à–∏—Ñ—Ä–∞—Ç–æ—Ä–∞

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –∫ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª–∏–Ω–µ –±–ª–æ–∫–∞ AES
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_text = padder.update(plaintext.encode('utf-8')) + padder.finalize()

    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    ciphertext = encryptor.update(padded_text) + encryptor.finalize()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å —Å–æ–ª—å—é –∏ IV, –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
    return base64.b64encode(salt + iv + ciphertext).decode('utf-8')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
def decrypt_string(ciphertext, key_string):
    """
    –î–µ—à–∏—Ñ—Ä—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES –≤ —Ä–µ–∂–∏–º–µ CBC –∏ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞.

    :param ciphertext: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64.
    :param key_string: –°—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
    :return: –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
    ciphertext = base64.b64decode(ciphertext)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–ª–∏, IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    salt = ciphertext[:16]
    iv = ciphertext[16:32]
    encrypted_text = ciphertext[32:]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π —Å–æ–ª–∏
    key = string_to_key(key_string, salt)

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —à–∏—Ñ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES –∏ —Ä–µ–∂–∏–º–∞ CBC
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–µ—à–∏—Ñ—Ä–∞—Ç–æ—Ä–∞

    # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    decrypted_padded_text = decryptor.update(encrypted_text) + decryptor.finalize()

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    decrypted_text = unpadder.update(decrypted_padded_text) + unpadder.finalize()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    return decrypted_text.decode('utf-8')

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
key_string = "key_sec_misha_zamena"

#–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class Authorization(APIView):
    #–ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è swagger
    @swagger_auto_schema(
        operation_id="Authorization",
        operation_summary="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä yandex_id",
        tags=["–ê–¥–º–∏–Ω. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'yandex_id': openapi.Schema(type=openapi.TYPE_STRING),
            },
            required=['yandex_id'],
            example={
                'yandex_id': '1357890436',
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                        'token': openapi.Schema(type=openapi.TYPE_STRING),
                        'role': openapi.Schema(type=openapi.TYPE_STRING, description="admin"),
                        'restaurant_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                    },
                    example={
                        'message': 'successfully',
                        'description': 'successfully',
                        'token': 'wamrgjwl3lq5ignkgybhqk3rulvqw3rheh',
                        'role': 'admin',
                        'restaurant_id': 157
                    }
                ),
            ),
        }
    )
    def post(self, request):
        try:
            #–ï—Å–ª–∏ yandex_id –µ—Å—Ç—å
            try:
                yandex_id = request.data.get('yandex_id')
                usern = Administrator.objects.get(id_yandex=str(yandex_id))
            except:
                return Response({"message": "error", "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω"})
            ciphertext = encrypt_string(str(usern.id_rest), key_string)
            return Response({
                "message": "successfully",
                "token": str(ciphertext),
                "role": str(usern.status),
                "restaurant_id": int(str(usern.id_rest))
            })
        except:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class Organizations_IIKO(APIView):
    @swagger_auto_schema(
        operation_id="Organizations_IIKO",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π IIKO",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π IIKO. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω",
        tags=["IIKO"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                        'organizations': openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Items(type=openapi.TYPE_OBJECT)),
                    },
                    example={
                        'message': 'successfully',
                        'description': 'successfully',
                        'organizations': [
                            {
                                "id": "organization_id_1",
                                "name": "Organization 1"
                            },
                            {
                                "id": "organization_id_2",
                                "name": "Organization 2"
                            }
                        ]
                    }
                ),
            ),
        }
    )
    def get(self, request):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            try:
                restaurant_id = decrypt_string(str(token), key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω IIKO –∏ ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            iiko_token = restaurant.id_iiko
            iiko_org_id = restaurant.org_iiko
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ API IIKO –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
            def request_end(url, headers, data):
                json_payload = json.dumps(data)
                response = requests.post(url, headers=headers, data=json_payload)
                return response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω IIKO
            data = {
                "apiLogin": iiko_token
            }
            headers = {
                'Content-Type': 'application/json',
            }
            iiko_api_token = request_end("https://api-ru.iiko.services/api/1/access_token", headers, data).get('token')
            
            if not iiko_api_token:
                return Response({"message": "error", "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ IIKO"})
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π IIKO
            headers = {
                'Content-Type': 'application/json',
                "Authorization": f"Bearer {iiko_api_token}"
            }
            organizations_response = request_end("https://api-ru.iiko.services/api/1/organizations", headers, {})
            
            organizations = organizations_response.get('organizations', [])
            
            return Response({
                "message": "successfully",
                "description": "successfully",
                "organizations": organizations
            })

        except Exception as e:
            return Response({"message": "error", "description": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

class FetchAndSaveMenu(APIView):
    @swagger_auto_schema(
        operation_id="FetchAndSaveMenu",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
        operation_description="–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω IIKO, –∑–∞—Ç–µ–º –º–µ–Ω—é —Å —Å–µ—Ä–≤–∏—Å–∞ IIKO –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É, —á–µ–π —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω.",
        tags=["IIKO"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                    },
                    example={
                        'message': 'successfully',
                        'description': 'successfully',
                    }
                ),
            ),
        }
    )
    def post(self, request):
        def Request_end(url, headers, data):
            try:
                headers_end = headers
                data_end = data
                json_payload = json.dumps(data_end)
                response = requests.post(url, headers=headers_end, data=json_payload)
                return response.json()
            except Exception as e:
                return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"}
        
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            try:
                restaurant_id = decrypt_string(str(token), key_string)
                try:
                    restaurant = Restaurant.objects.get(id=int(restaurant_id))
                except Restaurant.DoesNotExist:
                    return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})
            except ValueError:
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"})
            except Exception as e:
                return Response({"message": "error", "description": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}"})

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω IIKO
                data = {
                    "apiLogin": restaurant.id_iiko
                }
                headers = {
                    'Content-Type': 'application/json',
                }
                iiko_response = Request_end("https://api-ru.iiko.services/api/1/access_token", headers, data)
                if 'error' in iiko_response:
                    return Response({"message": "error", "description": iiko_response['error']})
                iiko_api_token = iiko_response.get('token')
                
                if not iiko_api_token:
                    return Response({"message": "error", "description": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω IIKO"})
            except Exception as e:
                return Response({"message": "error", "description": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ IIKO: {str(e)}"})

            try:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–Ω—é –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ IIKO
                data = {
                    "organizationId": restaurant.org_iiko,
                    "startRevision": 0
                }
                headers = {
                    'Content-Type': 'application/json',
                    "Authorization": f"Bearer {iiko_api_token}"
                }
                data = Request_end("https://api-ru.iiko.services/api/1/nomenclature", headers, data)
                if 'error' in data:
                    return Response({"message": "error", "description": data['error']})

                for category_data in data['productCategories']:
                    try:
                        cat = Category()
                        cat.name = category_data['name']
                        cat.des = category_data['id']
                        cat.show = True
                        cat.id_rest = restaurant
                        cat.save()
                    except Exception as e:
                        return Response({"message": "error", "description": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"})

                for product_data in data['products']:
                    try:
                        category = Category.objects.filter(des=str(product_data['productCategoryId'])).first()
                        for size_price in product_data['sizePrices']:
                            try:
                                dis = Dish()
                                dis.show = True
                                dis.id_rest = restaurant
                                dis.cat_id = category
                                dis.name = str(product_data['name']) if product_data['name'] else "-"
                                dis.weight = float(product_data['weight']) if product_data['weight'] else float(0)
                                dis.cost = float(size_price['price']['currentPrice']) if size_price['price']['currentPrice'] else float(0)
                                dis.cooking_time = "0"
                                dis.kall = "0"
                                dis.description = str(product_data['description']) if product_data['description'] else "-"
                                image_instance = Foto(id=22)
                                dis.photo = image_instance
                                dis.save()
                            except Exception as e:
                                return Response({"message": "error", "description": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–ª—é–¥–∞: {str(e)}"})
                    except Exception as e:
                        return Response({"message": "error", "description": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}"})
            except Exception as e:
                return Response({"message": "error", "description": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ–Ω—é IIKO: {str(e)}"})

            return Response({"message": "successfully", "description": "–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"})

        except Exception as e:
            return Response({
                "message": "error",
                "description": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            })
            
class Menu_list(APIView):
    http_method_names = ['get', 'head']
    item_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'parrent': openapi.Schema(type=openapi.TYPE_INTEGER),
            'name': openapi.Schema(type=openapi.TYPE_STRING),
            'show': openapi.Schema(type=openapi.TYPE_BOOLEAN)
        }
    )
    @swagger_auto_schema(
        operation_id="Menu_list_get",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ø–∏—Å–∫–æ–≤ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"),
                        'list': openapi.Schema(type=openapi.TYPE_ARRAY, items=item_schema)
                    },
                    example={
                        'message': 'successfully',
                        'description': '',
                        'list': [{
                            "id": 1,
                            "parrent": 0,
                            "name": "–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞",
                            "show": True
                        }]
                    }
                ),
            ),
        },
    )
    def get(self, request):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            try:
                restaurant_id = decrypt_string(str(token), key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})

            categories = Category.objects.filter(id_rest=restaurant)
            category_list = [{
                    "id": category.id,
                    "parrent": category.parrent,
                    "name": category.name,
                    "show": category.show
                } for category in categories]
            return Response({
                "message": "successfully",
                "description": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã",
                "list": category_list
            })
        except Restaurant.DoesNotExist:
            return Response({"message": "error", "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        except Category.DoesNotExist:
            return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})
        except Exception:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class Menu_list_edit(APIView):
    @swagger_auto_schema(
        operation_id="Menu_list_edit",
        operation_summary="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, ID —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–æ–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'id_menu',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'name': openapi.Schema(type=openapi.TYPE_STRING),
                'parrent': openapi.Schema(type=openapi.TYPE_INTEGER, description="ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"),
            },
            required=['name'],
            example={
                'name': "–ù–∞–ø–∏—Ç–∫–∏",
                'parrent': 1
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏")
                    },
                    example={
                        'message': 'successfully',
                        'description': ''
                    }
                ),
            ),
        }
    )
    def put(self, request, id_menu):
        try:
            name = request.data.get('name')
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            if not id_menu:
                return Response({"message": "error", "description": "ID –º–µ–Ω—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            if not name:
                return Response({"message": "error", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"})

            try:
                restaurant_id = decrypt_string(token, key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})

            try:
                category = Category.objects.get(id=int(id_menu))
            except Category.DoesNotExist:
                return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

            if category.id_rest != restaurant:
                return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"})

            category.name = name
            parrent_id = request.data.get('parrent')
            if parrent_id:
                try:
                    parrent_category = Category.objects.get(id=int(parrent_id))
                    category.parrent = parrent_category
                except Category.DoesNotExist:
                    return Response({"message": "error", "description": "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
            category.save()

            return Response({
                "message": "successfully",
                "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            })

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class Menu_list_create(APIView):
    @swagger_auto_schema(
        operation_id="Menu_list_create",
        operation_summary="–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'name': openapi.Schema(type=openapi.TYPE_STRING),
                'parrent': openapi.Schema(type=openapi.TYPE_INTEGER, description="ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"),
            },
            required=['name'],
            example={
                'name': "–°—É–ø—ã",
                'parrent': 1
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"),
                    },
                    example={
                        'message': 'successfully',
                        'description': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                    }
                ),
            ),
        }
    )
    def post(self, request):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –∏ ID –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
            name = request.data.get('name')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            if not name:
                return Response({"message": "error", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"})

            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            try:
                restaurant_id = decrypt_string(token, key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})
            parrent_id = request.data.get('parrent')
            cat = Category()
            if parrent_id:
                try:
                    parrent_category = Category.objects.get(id=int(parrent_id))
                    cat.parrent = parrent_category
                except Category.DoesNotExist:
                    return Response({"message": "error", "description": "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cat.name = name
            cat.show = True
            cat.id_rest = restaurant
            cat.save()

            return Response({
                "message": "successfully",
                "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
            })

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"+str(e)})
            
class Menu_list_delete(APIView):
    @swagger_auto_schema(
        operation_id="Menu_list_delete",
        operation_summary="–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'id_menu',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"),
                    },
                    example={
                        'message': 'successfully',
                        'description': '–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
                    }
                ),
            ),
        }
    )
    def delete(self, request, id_menu):
        try:
            name = request.data.get('name')
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            if id_menu is None:
                return Response({"message": "error", "description": "ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})

            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            try:
                restaurant_id = decrypt_string(str(token), key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
            try:
                category = Category.objects.get(id=int(id_menu))
                if category.id_rest != restaurant:
                    return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"})
            except Category.DoesNotExist:
                return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category.delete()

            return Response({
                "message": "successfully",
                "description": "–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            })

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class Menu_dish_get(APIView):
    item_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'id_menu': openapi.Schema(type=openapi.TYPE_INTEGER),
            'name': openapi.Schema(type=openapi.TYPE_STRING),
            'description': openapi.Schema(type=openapi.TYPE_STRING),
            'photo': openapi.Schema(type=openapi.TYPE_STRING),
            'label': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=openapi.Items(type=openapi.TYPE_STRING),
            ),
            'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
            'show': openapi.Schema(type=openapi.TYPE_BOOLEAN),
        }
    )

    @swagger_auto_schema(
        operation_id="Menu_dish_get",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –±–ª—é–¥–∞–º–∏"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"),
                        'list': openapi.Schema(type=openapi.TYPE_ARRAY, items=item_schema)
                    },
                    example={
                        'message': 'successfully',
                        'description': '',
                        'list': [{
                            "id": 1,
                            "id_menu": 1,
                            "name": "–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏",
                            "description": "–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤",
                            "photo": "https://restodev.ru/photo",
                            "cost": 1000.5,
                            'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                            "show": True,
                        }]
                    }
                ),
            ),
        }
    )
    def get(self, request):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})

            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            try:
                restaurant_id = decrypt_string(str(token), key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª—é–¥
            dish_objects = Dish.objects.filter(id_rest=restaurant)
            category_list = []
            for dish in dish_objects:
                labels = dish.label.all()
                label_names = [label.name for label in labels]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
                try:
                    fot = str(Foto.objects.get(id=int(str(dish.photo))).image.url)
                except Foto.DoesNotExist:
                    fot = str(Foto.objects.get(id=22).image.url)

                category_list.append({
                    "id": int(str(dish.id)),
                    "id_menu": int(str(dish.cat_id)),
                    "name": dish.name,
                    "cost": float(dish.cost),
                    "photo": "https://restodev.ru" + fot,
                    "label": label_names,
                    "description": dish.description,
                    "show": dish.show
                })

            return Response({
                "message": "successfully",
                "description": "",
                "list": category_list
            })

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ "+str(e)})
            
class Menu_dish_edit(APIView):
    @swagger_auto_schema(
        operation_id="Menu_dish_edit",
        operation_summary="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –±–ª—é–¥ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±–ª—é–¥ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ ID –±–ª—é–¥–∞. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –±–ª—é–¥–∞–º–∏"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'dish_id',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'name': openapi.Schema(type=openapi.TYPE_STRING),
                'ingredients': openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Items(type=openapi.TYPE_STRING),
                ),
                'weight': openapi.Schema(type=openapi.TYPE_NUMBER),
                'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
                'cooking_time': openapi.Schema(type=openapi.TYPE_STRING),
                'photo_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                'label': openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Items(type=openapi.TYPE_STRING),
                ),
                'kall': openapi.Schema(type=openapi.TYPE_INTEGER),
                'description': openapi.Schema(type=openapi.TYPE_STRING),
            },
            example={
                'name': "–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏",
                'ingredients': ["–≥—Ä–∏–±—ã", "–≤–æ–¥–∞", "—Å–æ–ª—å", "–ª—É–∫"],
                'weight': 500.5,
                'cost': 1000.5,
                'cooking_time': "30 –º–∏–Ω—É—Ç",
                'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                'kall': 150,
                'description': "–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤",
                'photo_id': 1,
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                    },
                    example={
                        'message': 'successfully',
                        'description': 'successfully',
                    }
                ),
            ),
        }
    )
    def put(self, request, dish_id):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token or not dish_id:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –∏ ID –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
            
            try:
                restaurant_id = decrypt_string(str(token), key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except Exception as e:
                return Response({"message": "error", "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: " + str(e)})
            
            try:
                dish_object = Dish.objects.get(id=int(dish_id))
            except Dish.DoesNotExist:
                return Response({"message": "error", "description": "–ë–ª—é–¥–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})

            if dish_object.id_rest != restaurant:
                return Response({"message": "error", "description": "–ë–ª—é–¥–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"})

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –±–ª—é–¥–∞
            def update_field(field_name, default_value):
                value = request.data.get(field_name)
                if value is not None and value != "None":
                    return value
                return default_value

            try:
                dish_object.name = update_field('name', dish_object.name)
                dish_object.weight = update_field('weight', dish_object.weight)
                dish_object.cost = update_field('cost', dish_object.cost)
                dish_object.cooking_time = update_field('cooking_time', dish_object.cooking_time)
                dish_object.kall = update_field('kall', dish_object.kall)
                dish_object.description = update_field('description', dish_object.description)

                ingredients = request.data.get('ingredients')
                if ingredients is not None:
                    ingredient_objs = [Ingredients.objects.get_or_create(name=name)[0] for name in ingredients]
                    dish_object.ingredients.set(ingredient_objs)

                labels = request.data.get('label')
                if labels is not None:
                    label_objs = [Label.objects.get_or_create(name=name)[0] for name in labels]
                    dish_object.label.set(label_objs)
                    
                photo_id = request.data.get('photo_id')
                if photo_id is not None:
                    dish_object.photo = Foto(id=photo_id)

            except Exception as e:
                return Response({"message": "error", "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞: " + str(e)})

            dish_object.save()
            return Response({"message": "successfully", "description": "–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"})

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + str(e)})
        
class Menu_dish_create(APIView):
    @swagger_auto_schema(
        operation_id="Menu_dish_create",
        operation_summary="–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –±–ª—é–¥ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±–ª—é–¥ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –±–ª—é–¥–∞–º–∏"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'id_menu': openapi.Schema(type=openapi.TYPE_INTEGER),
                'name': openapi.Schema(type=openapi.TYPE_STRING),
                'ingredients': openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Items(type=openapi.TYPE_STRING),
                ),
                'weight': openapi.Schema(type=openapi.TYPE_NUMBER),
                'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
                'cooking_time': openapi.Schema(type=openapi.TYPE_STRING),
                'photo_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                'label': openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Items(type=openapi.TYPE_STRING),
                ),
                'kall': openapi.Schema(type=openapi.TYPE_INTEGER),
                'description': openapi.Schema(type=openapi.TYPE_STRING),
            },
            required=['id_menu'],
            example={
                'id_menu': 1,
                'name': "–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏",
                'ingredients': ["–≥—Ä–∏–±—ã", "–≤–æ–¥–∞", "—Å–æ–ª—å", "–ª—É–∫"],
                'weight': 500.5,
                'cost': 1000.5,
                'cooking_time': "30 –º–∏–Ω—É—Ç",
                'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                'kall': 150,
                'description': "–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤",
                'photo_id': 1,
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                    },
                    example={
                        'message': 'successfully',
                        'description': '–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
                    }
                ),
            ),
        }
    )
    def post(self, request, *args, **kwargs):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –∏ ID –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
            id_menu = request.data.get('id_menu')
            try:
                restaurant_id = decrypt_string(str(token), key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
                menu = Category.objects.get(id=int(id_menu))
            except (Restaurant.DoesNotExist, Category.DoesNotExist) as e:
                return Response({"message": "error", "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + str(e)})

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
            dis = Dish(
                show=True,
                id_rest=restaurant,
                cat_id=menu,
                name=request.data.get('name', ''),
                weight=float(request.data.get('weight', '0')),
                cost=float(request.data.get('cost', '0')),
                cooking_time=request.data.get('cooking_time', ''),
                kall=request.data.get('kall', ''),
                description=request.data.get('description', ''),
            )

            if not dis.name:
                return Response({"message": "error", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})
            if not dis.weight:
                return Response({"message": "error", "description": "–í–µ—Å –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
            if not dis.cost:
                return Response({"message": "error", "description": "–°—Ç–æ–∏–º–æ—Å—Ç—å –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"})
            if not dis.cooking_time:
                return Response({"message": "error", "description": "–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})
            if not dis.kall:
                return Response({"message": "error", "description": "–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"})
            if not dis.description:
                return Response({"message": "error", "description": "–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})

            # –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            photo_id = request.data.get('photo_id')
            if photo_id:
                image_instance = Foto(id=photo_id)
                dis.photo = image_instance
            else:
                image_instance = Foto(id=22)
                dis.photo = image_instance

            dis.save()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            ingredients = request.data.get('ingredients', [])
            if ingredients:
                ingredient_objs = [Ingredients.objects.get_or_create(name=name)[0] for name in ingredients]
                dis.ingredients.set(ingredient_objs)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–∫
            labels = request.data.get('label', [])
            if labels:
                label_objs = [Label.objects.get_or_create(name=name)[0] for name in labels]
                dis.label.set(label_objs)

            return Response({"message": "successfully", "description": "–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"})

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + str(e)})
            
class Menu_list_dish_get(APIView):
    item_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'id_menu': openapi.Schema(type=openapi.TYPE_INTEGER),
            'name': openapi.Schema(type=openapi.TYPE_STRING),
            'description': openapi.Schema(type=openapi.TYPE_STRING),
            'photo': openapi.Schema(type=openapi.TYPE_STRING),
            'label': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=openapi.Items(type=openapi.TYPE_STRING),
            ),
            'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
            'show': openapi.Schema(type=openapi.TYPE_BOOLEAN),
        }
    )

    @swagger_auto_schema(
        operation_id="Menu_list_dish_get",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –±–ª—é–¥–∞–º–∏"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'menu_id',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'list': openapi.Schema(type=openapi.TYPE_ARRAY, items=item_schema)
                    },
                    example={
                        'message': 'successfully',
                        'list': [{
                            "id": 1,
                            "id_menu": 1,
                            "name": "–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏",
                            "description": "–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤",
                            "photo": "https://restodev.ru/photo",
                            "cost": 1000.5,
                            'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                            "show": True,
                        }]
                    }
                ),
            ),
        }
    )
    def get(self, request, menu_id):
        auth_header = request.headers.get('Authorization')
        token = auth_header.split(' ')[1]
        id_menu = menu_id
        if not token or not id_menu:
            return Response({
                "message": "error",
                "description": "–¢–æ–∫–µ–Ω –∏ ID –º–µ–Ω—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            })

        try:
            restaurant_id = decrypt_string(str(token), key_string)
            restaurant = Restaurant.objects.get(id=int(restaurant_id))
            menu = Category.objects.get(id=int(id_menu))
        except (Restaurant.DoesNotExist, Category.DoesNotExist) as e:
            return Response({
                "message": "error",
                "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            })

        try:
            dish_objects = Dish.objects.filter(id_rest=restaurant, cat_id=menu)
            category_list = []

            for dish in dish_objects:
                labels = dish.label.all()
                label_names = [label.name for label in labels]
                photo_url = ""
                if dish.photo:
                    try:
                        photo_url = str(dish.photo.image.url)
                    except:
                        photo_url = str(Foto.objects.get(id=22).image.url)
                category_list.append({
                    "id": dish.id,
                    "id_menu": dish.cat_id.id,
                    "name": dish.name,
                    "cost": float(dish.cost),
                    "photo": "https://restodev.ru" + photo_url,
                    "label": label_names,
                    "description": dish.description,
                    "show": dish.show
                })

            return Response({
                "message": "successfully",
                "list": category_list
            })

        except Exception as e:
            return Response({
                "message": "error",
                "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + str(e)
            })
            
class Menu_dish_delete(APIView):
    @swagger_auto_schema(
        operation_id="Menu_dish_delete",
        operation_summary="–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –±–ª—é–¥ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±–ª—é–¥ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ ID –±–ª—é–¥–∞. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –±–ª—é–¥–∞–º–∏"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'dish_id',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"),
                    },
                    example={
                        'message': 'successfully',
                        'description': '–ë–ª—é–¥–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.',
                    }
                ),
            ),
        }
    )
    def delete(self, request, dish_id):
        auth_header = request.headers.get('Authorization')
        token = auth_header.split(' ')[1]
        id_dish = dish_id

        if not token or not id_dish:
            return Response({
                "message": "error",
                "description": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ç–æ–∫–µ–Ω –∏ ID –±–ª—é–¥–∞."
            })

        try:
            restaurant_id = decrypt_string(str(token), key_string)
            restaurant = Restaurant.objects.get(id=int(restaurant_id))
            dish = Dish.objects.get(id=int(id_dish))
            
            if dish.id_rest == restaurant:
                dish.delete()
                return Response({
                    "message": "successfully",
                    "description": "–ë–ª—é–¥–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
                })
            else:
                return Response({
                    "message": "error",
                    "description": "–ë–ª—é–¥–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É."
                })

        except Restaurant.DoesNotExist:
            return Response({
                "message": "error",
                "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."
            })
        except Dish.DoesNotExist:
            return Response({
                "message": "error",
                "description": "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            })
        except Exception as e:
            return Response({
                "message": "error",
                "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + str(e)
            })
            
class Telegram_api(APIView):
    @swagger_auto_schema(
        operation_id="Telegram",
        operation_summary="–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Telegram. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–æ–∫–µ–Ω —Å–∏—Å—Ç–µ–º—ã, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º (@restodev_bot)",
        tags=["–ê–¥–º–∏–Ω. –¢–µ–ª–µ–≥—Ä–∞–º"],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'token': openapi.Schema(type=openapi.TYPE_STRING),
                'id': openapi.Schema(type=openapi.TYPE_INTEGER),
                'text': openapi.Schema(type=openapi.TYPE_STRING),
            },
            required=['token', 'id', 'text'],
            example={
                'token': '4fpgUU3OZxZAdSGlGU2v/xraof07a47/3skLjbTumvE=',
                'id': 1236789567,
                'text': "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            },
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                    },
                    example={
                        'message': 'successfully',
                    }
                ),
            ),
        }
    )
    def post(self, request):
        try:
            token = str(request.data.get('token'))
            id_tg = str(request.data.get('id'))
            text = str(request.data.get('text'))
            restaurant_id = decrypt_string(str(token), key_string)
            restaurant = Restaurant.objects.get(id=int(restaurant_id))
            a = requests.get("https://api.telegram.org/bot6744104810:AAHr3z6BQ2tcaanS-ijtyNF6Fiqcgcn7uv8/sendMessage?chat_id=" + id_tg + "&text=" + text + "")
            return Response({
                "message": "successfully",
            })
        except:
            return Response({"message": "error"})
            
class Menu_dish_get_definite(APIView):
    @swagger_auto_schema(
        operation_id="Menu_dish_get_definite",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥–∞ –º–µ–Ω—é (–ø–æ–¥—Ä–æ–±–Ω–æ)",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –±–ª—é–¥–∞ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ ID –±–ª—é–¥–∞",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –±–ª—é–¥–∞–º–∏"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'id_dish',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'cat_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'name': openapi.Schema(type=openapi.TYPE_STRING),
                        'ingredients': openapi.Schema(
                            type=openapi.TYPE_ARRAY,
                            items=openapi.Items(type=openapi.TYPE_STRING),
                        ),
                        'weight': openapi.Schema(type=openapi.TYPE_NUMBER),
                        'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
                        'cooking_time': openapi.Schema(type=openapi.TYPE_STRING),
                        'photo': openapi.Schema(type=openapi.TYPE_STRING),
                        'label': openapi.Schema(
                            type=openapi.TYPE_ARRAY,
                            items=openapi.Items(type=openapi.TYPE_STRING),
                        ),
                        'kall': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'show': openapi.Schema(type=openapi.TYPE_BOOLEAN),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                    },
                    example={
                        'message': 'successfully',
                        'cat_id': 1,
                        'name': '–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏',
                        'ingredients': ["–≥—Ä–∏–±—ã", "–≤–æ–¥–∞", "—Å–æ–ª—å", "–ª—É–∫"],
                        'weight': 500,
                        'cost': 1000.5,
                        'cooking_time': "30 –º–∏–Ω—É—Ç",
                        'photo': 'https://restodev.ru/photo',
                        'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                        'kall': 150,
                        'show': True,
                        'description': '–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤',
                    }
                ),
            ),
        }
    )
    def get(self, request, id_dish):
        auth_header = request.headers.get('Authorization')
        token = auth_header.split(' ')[1]

        if not token or not id_dish:
            return Response({
                "message": "error",
                "description": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ç–æ–∫–µ–Ω –∏ ID –±–ª—é–¥–∞."
            })

        try:
            restaurant_id = decrypt_string(str(token), key_string)
            restaurant = Restaurant.objects.get(id=int(restaurant_id))
            dish = Dish.objects.get(id=int(id_dish))

            if dish.id_rest != restaurant:
                return Response({
                    "message": "error",
                    "description": "–ë–ª—é–¥–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É."
                })

            labels = dish.label.all()
            label_names = [label.name for label in labels]
            ingredients = dish.ingredients.all()
            ingredient_names = [ingredient.name for ingredient in ingredients]

            try:
                photo_url = str(Foto.objects.get(id=int(dish.photo.id)).image.url)
            except Foto.DoesNotExist:
                photo_url = ""

            return Response({
                "message": "successfully",
                "cat_id": dish.cat_id.id,
                "name": dish.name,
                "ingredients": ingredient_names,
                "weight": float(dish.weight),
                "cost": float(dish.cost),
                "cooking_time": dish.cooking_time,
                "photo": "https://restodev.ru" + photo_url,
                "label": label_names,
                "kall": dish.kall,
                "show": dish.show,
                "description": dish.description,
            })
        except Restaurant.DoesNotExist:
            return Response({
                "message": "error",
                "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."
            })
        except Dish.DoesNotExist:
            return Response({
                "message": "error",
                "description": "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            })
        except Exception as e:
            return Response({
                "message": "error",
                "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + str(e)
            })
            
class Menu_dish_status(APIView):
    @swagger_auto_schema(
        operation_id="Menu_dish_status",
        operation_summary="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª—é–¥–∞ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª—é–¥–∞ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, ID –±–ª—é–¥–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –±–ª—é–¥–∞–º–∏"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'dish_id',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'status': openapi.Schema(type=openapi.TYPE_BOOLEAN),
            },
            required=['token'],
            example={
                'status': True,
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="—É—Å–ø–µ—à–Ω–æ / –æ—à–∏–±–∫–∞"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞"),
                    },
                    example={
                        'message': '—É—Å–ø–µ—à–Ω–æ',
                        'description': '–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.',
                    }
                ),
            ),
        }
    )
    def put(self, request, dish_id):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            if not dish_id:
                return Response({"message": "error", "description": "ID –±–ª—é–¥–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            restaurant_id = decrypt_string(token, key_string)
            restaurant = Restaurant.objects.get(id=int(restaurant_id))
            dish_object = Dish.objects.get(id=int(dish_id))
            
            if dish_object.id_rest != restaurant:
                return Response({"message": "–æ—à–∏–±–∫–∞", "description": "–ë–ª—é–¥–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É."})
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            status = str(request.data.get('status')).lower()
            dish_object.show = (status == "true")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            dish_object.name = dish_object.name
            dish_object.ingredients.set(dish_object.ingredients.all())
            dish_object.weight = dish_object.weight
            dish_object.cost = dish_object.cost
            dish_object.cooking_time = dish_object.cooking_time
            dish_object.label.set(dish_object.label.all())
            dish_object.kall = dish_object.kall
            dish_object.description = dish_object.description
            dish_object.photo = dish_object.photo
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            dish_object.save()

            return Response({"message": "—É—Å–ø–µ—à–Ω–æ", "description": "–°—Ç–∞—Ç—É—Å –±–ª—é–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."})
        except Restaurant.DoesNotExist:
            return Response({"message": "–æ—à–∏–±–∫–∞", "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."})
        except Dish.DoesNotExist:
            return Response({"message": "–æ—à–∏–±–∫–∞", "description": "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."})
        except Exception as e:
            return Response({"message": "–æ—à–∏–±–∫–∞", "description": str(e)})
            
class Authorization_number(APIView):
    @swagger_auto_schema(
        operation_id="Authorization_number",
        operation_summary="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä number –∏ password.",
        tags=["–ê–¥–º–∏–Ω. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'number': openapi.Schema(type=openapi.TYPE_STRING),
                'password': openapi.Schema(type=openapi.TYPE_STRING),
            },
            required=['number', 'password'],
            example={
                'number': '79051757737',
                'password': '12345',
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                        'token': openapi.Schema(type=openapi.TYPE_STRING),
                        'role': openapi.Schema(type=openapi.TYPE_STRING, description="admin"),
                        'restaurant_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                    },
                    example={
                        'message': 'successfully',
                        'description': '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.',
                        'token': 'wamrgjwl3lq5ignkgybhqk3rulvqw3rheh',
                        'role': 'admin',
                        'restaurant_id': 157
                    }
                ),
            ),
        }
    )
    def post(self, request):
        try:
            try:
                yandex_id = request.data.get('number')
                password = str(request.data.get('password'))
                usern = Administrator.objects.get(number=str(yandex_id))
            except:
                return Response({"message": "error", "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω"})
            if str(password) != str(usern.administrator_password):
                return Response({"message": "error", "description": "–ü–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –≤–µ—Ä–µ–Ω"})
            ciphertext = encrypt_string(str(usern.id_rest), key_string)
            return Response({
                "message": "successfully",
                "token": str(ciphertext),
                "role": str(usern.status),
                "restaurant_id": int(str(usern.id_rest))
            })
        except:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class Menu_list_status(APIView):
    @swagger_auto_schema(
        operation_id="Menu_list_status",
        operation_summary="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, ID —ç–ª–µ–º–µ–Ω—Ç–∞, —Å—Ç–∞—Ç—É—Å",
        tags=["–ê–¥–º–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
            openapi.Parameter(
                'id_menu',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'status': openapi.Schema(type=openapi.TYPE_BOOLEAN),
            },
            required=['status'],
            example={
                'status': True
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"),
                    },
                    example={
                        'message': 'successfully',
                        'description': '–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
                    }
                ),
            ),
        }
    )
    def put(self, request, id_menu):
        try:
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            status = request.data.get('status')
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            if id_menu is None:
                return Response({"message": "error", "description": "ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            if status is None:
                return Response({"message": "error", "description": "–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})

            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            try:
                restaurant_id = decrypt_string(token, key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
            try:
                category = Category.objects.get(id=int(id_menu))
                if category.id_rest != restaurant:
                    return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"})
            except Category.DoesNotExist:
                return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category.show = bool(status)
            category.save()

            return Response({
                "message": "successfully",
                "description": "–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
            })

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class FotoUploadView(APIView):
    @swagger_auto_schema(
        operation_id="upload_image",
        operation_summary="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        operation_description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –í –æ—Ç–≤–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.",
        tags=["–ê–¥–º–∏–Ω. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"],
        manual_parameters=[
            openapi.Parameter(
                'Authorization',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer <—Ç–æ–∫–µ–Ω>'",
                type=openapi.TYPE_STRING,
                required=True,
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'image': openapi.Schema(type=openapi.TYPE_FILE, description="–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
                'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
            },
            required=['image'],
            example={
                'image': 'example.jpg',
                'description': '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
            }
        ),
        responses={
            200: openapi.Response(
                description="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'id': openapi.Schema(type=openapi.TYPE_INTEGER, description="ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                    },
                    example={
                        'id': 1,
                        'message': 'successfully',
                    }
                )
            ),
        }
    )
    def post(self, request):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_header = request.headers.get('Authorization')
            token = auth_header.split(' ')[1]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not token:
                return Response({"message": "error", "description": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
            try:
                restaurant_id = decrypt_string(token, key_string)
                restaurant = Restaurant.objects.get(id=int(restaurant_id))
            except (ValueError, Restaurant.DoesNotExist):
                return Response({"message": "error", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            image = request.FILES.get('image')
            description = request.data.get('description', '-')

            if not image:
                return Response({"message": "error", "description": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"})

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            foto = Foto.objects.create(image=image, description=description)
            
            return Response({'id': foto.id})
        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class user_Menu_list(APIView):
    http_method_names = ['get', 'head']
    item_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'parrent': openapi.Schema(type=openapi.TYPE_INTEGER),
            'name': openapi.Schema(type=openapi.TYPE_STRING),
            'show': openapi.Schema(type=openapi.TYPE_BOOLEAN)
        }
    )
    @swagger_auto_schema(
        operation_id="user_Menu_list_get",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ø–∏—Å–∫–æ–≤ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
        tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'id_rest',
                openapi.IN_PATH,
                description="ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"),
                        'list': openapi.Schema(type=openapi.TYPE_ARRAY, items=item_schema)
                    },
                    example={
                        'message': 'successfully',
                        'description': '',
                        'list': [{
                            "id": 1,
                            "parrent": 0,
                            "name": "–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞",
                            "show": True
                        }]
                    }
                ),
            ),
        },
    )
    def get(self, request, id_rest):
        try:
            restaurant = Restaurant.objects.get(id=int(id_rest))
            categories = Category.objects.filter(id_rest=restaurant)
            category_list = [{
                    "id": category.id,
                    "parrent": category.parrent,
                    "name": category.name,
                    "show": category.show
                } for category in categories]
            return Response({
                "message": "successfully",
                "description": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã",
                "list": category_list
            })
        except Restaurant.DoesNotExist:
            return Response({"message": "error", "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        except Category.DoesNotExist:
            return Response({"message": "error", "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})
        except Exception:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
            
class user_Menu_dish_get(APIView):
    item_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'id_menu': openapi.Schema(type=openapi.TYPE_INTEGER),
            'name': openapi.Schema(type=openapi.TYPE_STRING),
            'description': openapi.Schema(type=openapi.TYPE_STRING),
            'photo': openapi.Schema(type=openapi.TYPE_STRING),
            'label': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=openapi.Items(type=openapi.TYPE_STRING),
            ),
            'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
            'show': openapi.Schema(type=openapi.TYPE_BOOLEAN),
        }
    )

    @swagger_auto_schema(
        operation_id="user_Menu_dish_get",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.",
        tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'id_rest',
                openapi.IN_PATH,
                description="ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"),
                        'list': openapi.Schema(type=openapi.TYPE_ARRAY, items=item_schema)
                    },
                    example={
                        'message': 'successfully',
                        'description': '',
                        'list': [{
                            "id": 1,
                            "id_menu": 1,
                            "name": "–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏",
                            "description": "–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤",
                            "photo": "https://restodev.ru/photo",
                            "cost": 1000.5,
                            'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                            "show": True,
                        }]
                    }
                ),
            ),
        }
    )
    def get(self, request, id_rest):
        try:
            restaurant = Restaurant.objects.get(id=int(id_rest))
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª—é–¥
            dish_objects = Dish.objects.filter(id_rest=restaurant)
            category_list = []
            for dish in dish_objects:
                labels = dish.label.all()
                label_names = [label.name for label in labels]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
                try:
                    fot = str(Foto.objects.get(id=int(str(dish.photo))).image.url)
                except Foto.DoesNotExist:
                    fot = str(Foto.objects.get(id=22).image.url)

                category_list.append({
                    "id": int(str(dish.id)),
                    "id_menu": int(str(dish.cat_id)),
                    "name": dish.name,
                    "cost": float(dish.cost),
                    "photo": "https://restodev.ru" + fot,
                    "label": label_names,
                    "description": dish.description,
                    "show": dish.show
                })

            return Response({
                "message": "successfully",
                "description": "",
                "list": category_list
            })

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ "+str(e)})
            
class user_Menu_list_dish_get(APIView):
    item_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'id_menu': openapi.Schema(type=openapi.TYPE_INTEGER),
            'name': openapi.Schema(type=openapi.TYPE_STRING),
            'description': openapi.Schema(type=openapi.TYPE_STRING),
            'photo': openapi.Schema(type=openapi.TYPE_STRING),
            'label': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=openapi.Items(type=openapi.TYPE_STRING),
            ),
            'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
            'show': openapi.Schema(type=openapi.TYPE_BOOLEAN),
        }
    )

    @swagger_auto_schema(
        operation_id="user_Menu_list_dish_get",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—é",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'menu_id',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
            openapi.Parameter(
                'id_rest',
                openapi.IN_PATH,
                description="ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'list': openapi.Schema(type=openapi.TYPE_ARRAY, items=item_schema)
                    },
                    example={
                        'message': 'successfully',
                        'list': [{
                            "id": 1,
                            "id_menu": 1,
                            "name": "–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏",
                            "description": "–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤",
                            "photo": "https://restodev.ru/photo",
                            "cost": 1000.5,
                            'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                            "show": True,
                        }]
                    }
                ),
            ),
        }
    )
    def get(self, request, menu_id, id_rest):
        id_menu = menu_id
        if not id_rest or not id_menu:
            return Response({
                "message": "error",
                "description": "ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ ID –º–µ–Ω—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            })

        try:
            restaurant = Restaurant.objects.get(id=int(id_rest))
            menu = Category.objects.get(id=int(id_menu))
        except (Restaurant.DoesNotExist, Category.DoesNotExist) as e:
            return Response({
                "message": "error",
                "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            })

        try:
            dish_objects = Dish.objects.filter(id_rest=restaurant, cat_id=menu)
            category_list = []

            for dish in dish_objects:
                labels = dish.label.all()
                label_names = [label.name for label in labels]
                photo_url = ""
                if dish.photo:
                    try:
                        photo_url = str(dish.photo.image.url)
                    except:
                        photo_url = str(Foto.objects.get(id=22).image.url)
                category_list.append({
                    "id": dish.id,
                    "id_menu": dish.cat_id.id,
                    "name": dish.name,
                    "cost": float(dish.cost),
                    "photo": "https://restodev.ru" + photo_url,
                    "label": label_names,
                    "description": dish.description,
                    "show": dish.show
                })

            return Response({
                "message": "successfully",
                "list": category_list
            })

        except Exception as e:
            return Response({
                "message": "error",
                "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + str(e)
            })
            
class user_Menu_dish_get_definite(APIView):
    @swagger_auto_schema(
        operation_id="user_Menu_dish_get_definite",
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª—é–¥–∞ –º–µ–Ω—é (–ø–æ–¥—Ä–æ–±–Ω–æ)",
        operation_description="–î–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –±–ª—é–¥–∞ –º–µ–Ω—é. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ID –±–ª—é–¥–∞",
        tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'id_dish',
                openapi.IN_PATH,
                description="ID, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL",
                type=openapi.TYPE_INTEGER,
                required=True,  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            ),
        ],
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'cat_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'name': openapi.Schema(type=openapi.TYPE_STRING),
                        'ingredients': openapi.Schema(
                            type=openapi.TYPE_ARRAY,
                            items=openapi.Items(type=openapi.TYPE_STRING),
                        ),
                        'weight': openapi.Schema(type=openapi.TYPE_NUMBER),
                        'cost': openapi.Schema(type=openapi.TYPE_NUMBER),
                        'cooking_time': openapi.Schema(type=openapi.TYPE_STRING),
                        'photo': openapi.Schema(type=openapi.TYPE_STRING),
                        'label': openapi.Schema(
                            type=openapi.TYPE_ARRAY,
                            items=openapi.Items(type=openapi.TYPE_STRING),
                        ),
                        'kall': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'show': openapi.Schema(type=openapi.TYPE_BOOLEAN),
                        'description': openapi.Schema(type=openapi.TYPE_STRING),
                    },
                    example={
                        'message': 'successfully',
                        'cat_id': 1,
                        'name': '–°—É–ø —Å –≥—Ä–∏–±–∞–º–∏',
                        'ingredients': ["–≥—Ä–∏–±—ã", "–≤–æ–¥–∞", "—Å–æ–ª—å", "–ª—É–∫"],
                        'weight': 500,
                        'cost': 1000.5,
                        'cooking_time': "30 –º–∏–Ω—É—Ç",
                        'photo': 'https://restodev.ru/photo',
                        'label': ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "—Å—É–ø"],
                        'kall': 150,
                        'show': True,
                        'description': '–í–∫—É—Å–Ω—ã–π —Å—É–ø —Å –∫—É—Å–æ—á–∫–∞–º–∏ –≥—Ä–∏–±–æ–≤',
                    }
                ),
            ),
        }
    )
    def get(self, request, id_dish):

        try:
            dish = Dish.objects.get(id=int(id_dish))
            labels = dish.label.all()
            label_names = [label.name for label in labels]
            ingredients = dish.ingredients.all()
            ingredient_names = [ingredient.name for ingredient in ingredients]

            try:
                photo_url = str(Foto.objects.get(id=int(dish.photo.id)).image.url)
            except Foto.DoesNotExist:
                photo_url = ""

            return Response({
                "message": "successfully",
                "cat_id": dish.cat_id.id,
                "name": dish.name,
                "ingredients": ingredient_names,
                "weight": float(dish.weight),
                "cost": float(dish.cost),
                "cooking_time": dish.cooking_time,
                "photo": "https://restodev.ru" + photo_url,
                "label": label_names,
                "kall": dish.kall,
                "show": dish.show,
                "description": dish.description,
            })
        except Restaurant.DoesNotExist:
            return Response({
                "message": "error",
                "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."
            })
        except Dish.DoesNotExist:
            return Response({
                "message": "error",
                "description": "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            })
        except Exception as e:
            return Response({
                "message": "error",
                "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + str(e)
            })
            
class OrderCreateView(APIView):
    @swagger_auto_schema(
        operation_id="OrderCreate",
        operation_summary="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
        operation_description="–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ —Å—Ç–æ–ª–∞, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –±–ª—é–¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.",
        tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é"],
        manual_parameters=[
            openapi.Parameter(
                'id_rest',
                openapi.IN_PATH,
                description="ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–∫–∞–∑",
                type=openapi.TYPE_INTEGER,
                required=True,
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'table_id': openapi.Schema(type=openapi.TYPE_STRING, description="ID —Å—Ç–æ–ª–∞"),
                'dishes': openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Items(type=openapi.TYPE_INTEGER),
                    description="–°–ø–∏—Å–æ–∫ ID –±–ª—é–¥"
                ),
            },
            required=['table_id', 'dishes'],
            example={
                'table_id': "A1",
                'dishes': [1, 2, 3]
            }
        ),
        responses={
            200: openapi.Response(
                description="OK",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING, description="successfully / error"),
                        'description': openapi.Schema(type=openapi.TYPE_STRING, description="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"),
                        'order_id': openapi.Schema(type=openapi.TYPE_INTEGER, description="ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"),
                        'total_amount': openapi.Schema(type=openapi.TYPE_NUMBER, description="–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞"),
                    },
                    example={
                        'message': 'successfully',
                        'description': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
                        'order_id': 1,
                        'total_amount': 2500.75,
                    }
                ),
            ),
        }
    )
    def post(self, request, id_rest, *args, **kwargs):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            table_id = request.data.get('table_id')
            dish_ids = request.data.get('dishes', [])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not table_id:
                return Response({"message": "error", "description": "ID —Å—Ç–æ–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
            if not dish_ids:
                return Response({"message": "error", "description": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ"})

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            try:
                restaurant = Restaurant.objects.get(id=int(id_rest))
            except Restaurant.DoesNotExist:
                return Response({"message": "error", "description": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª—é–¥
            valid_dishes = []
            total_amount = 0
            for dish_id in dish_ids:
                try:
                    dish = Dish.objects.get(id=int(dish_id), id_rest=restaurant)
                    valid_dishes.append(dish)
                    total_amount += dish.cost
                except Dish.DoesNotExist:
                    return Response({"message": "error", "description": f"–ë–ª—é–¥–æ —Å ID {dish_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"})

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            order = Order(
                id_rest=restaurant,
                table_id=table_id,
                total_amount=total_amount
            )
            order.save()
            order.dishes.set(valid_dishes)

            return Response({
                "message": "successfully",
                "description": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                "order_id": order.id,
                "total_amount": total_amount,
            })

        except Exception as e:
            return Response({"message": "error", "description": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + str(e)})